import { CallExpression } from './call.expression.js';
import { GroupingExpression } from './grouping.expression.js';
import { NewObjectExpression } from './new-object.expression.js';
import { PropertyProjector } from './property-projector.expression.js';

export type Abstract<T> = Function & { prototype: T };
export type Constructor<T> = new (...args: any[]) => T;
export type Class<T> = Abstract<T> & Constructor<T>;
export type ProjectorExpression = CallExpression | NewObjectExpression | PropertyProjector | GroupingExpression;
export * from './expression.js';
export * from './big-int-literal.js';
export * from './binary.expression.js';
export * from './boolean-literal.js';
export * from './column.expression.js';
export * from './join.expression.js';
export * from './select.expression.js';
export * from './data-source.js';
export * from './order-by.expression.js';
export * from './new-object.expression.js';
export * from './property-projector.expression.js';
export * from './string-literal.js';
export * from './member.expression.js';
export * from './identifier.js';
export * from './call.expression.js';
export * from './object-property.js';
export * from './object.expression.js';
export * from './arrow-function.expression.js';
export * from './sql.expression.js';
export * from './null-literal.js';
export * from './numeric-literal.js';
export * from './grouping.expression.js';
export * from './new.expression.js';